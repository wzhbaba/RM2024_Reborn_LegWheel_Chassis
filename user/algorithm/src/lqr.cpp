/**
 *******************************************************************************
 * @file      : lqr.cpp
 * @brief     :
 * @history   :
 *  Version     Date            Author          Note
 *  V0.9.0      yyyy-mm-dd      <author>        1. <note>
 *******************************************************************************
 * @attention :
 *******************************************************************************
 *  Copyright (c) 2024 Reborn Team, USTB.
 *  All Rights Reserved.
 *******************************************************************************
 */
/* Includes ------------------------------------------------------------------*/
#include "lqr.h"

#include "stdint.h"
/* Private macro -------------------------------------------------------------*/
/* Private constants ---------------------------------------------------------*/
/* Private types -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
const float k[12][3] = {
    215.5418,  -196.1116, -15.8929, 38.1308,  -32.3263, -3.7386,
    35.7213,   -34.5393,  -6.7232,  25.8160,  -27.6452, -10.6320,
    145.3596,  -149.4526, 54.9964,  28.8699,  -28.7132, 10.8929,
    -186.3330, 49.2298,   32.8100,  -1.4540,  -15.6242, 11.5210,
    -36.2815,  2.0588,    11.3715,  -11.7122, -17.7105, 16.2555,
    -315.5111, 235.9564,  61.7358,  -59.6264, 45.3878,  9.5735,
};
/* External variables --------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/

void Lqr::Calc() {
  float lsqr = leg_len_ * leg_len_;

  for (uint8_t i = 0; i < 2; ++i) {
    uint8_t j = i * 6;
    T_K_[i][0] =
        (k[j + 0][0] * lsqr + k[j + 0][1] * leg_len_ + k[j + 0][2]) * -theta_;
    T_K_[i][1] =
        (k[j + 1][0] * lsqr + k[j + 1][1] * leg_len_ + k[j + 1][2]) * -w_theta_;
    T_K_[i][2] =
        (k[j + 2][0] * lsqr + k[j + 2][1] * leg_len_ + k[j + 2][2]) * -dist_;
    T_K_[i][3] = (k[j + 3][0] * lsqr + k[j + 3][1] * leg_len_ + k[j + 3][2]) *
                 (target_speed_ - speed_);
    T_K_[i][4] =
        (k[j + 4][0] * lsqr + k[j + 4][1] * leg_len_ + k[j + 4][2]) * -phi_;
    T_K_[i][5] =
        (k[j + 5][0] * lsqr + k[j + 5][1] * leg_len_ + k[j + 5][2]) * -w_phi_;
  }

  if (F_N_ < 20.0f) {
    for (uint8_t i = 0; i < 6; ++i) {
      T_K_[0][i] = 0.0f;
    };
    T_K_[1][2] = T_K_[1][3] = T_K_[1][4] = T_K_[1][5] = 0.0f;
  }

  for (uint8_t i = 0; i < 2; ++i) {
    T_[i] = T_K_[i][0] + T_K_[i][1] + T_K_[i][2] + T_K_[i][3] + T_K_[i][4] +
            T_K_[i][5];
  }
}